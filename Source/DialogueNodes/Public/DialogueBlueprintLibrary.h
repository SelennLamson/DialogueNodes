// Copyright 2019-2029 Thomas Lamson, All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "UObject/TextProperty.h"
#include "Engine/MemberReference.h"
#include "Sound/SoundCue.h"
#include "Sound/DialogueWave.h"

#include "Dialogue.h"

#include "Events/DialogueBlueprintEvent.h"
#include "Events/DialogueEnd.h"
#include "Events/DialogueEvent.h"
#include "Events/DialogueGoto.h"
#include "Events/DialogueOption.h"
#include "Events/DialogueTextEvent.h"

#include "DialogueBlueprintLibrary.generated.h"

/** Blueprint library containing all final nodes for making Dialogues.
* Warning: some of them aren't for users but are generated by more user-friendly nodes. */
UCLASS()
class DIALOGUENODES_API UDialogueBlueprintLibrary : public UBlueprintFunctionLibrary
{
	GENERATED_BODY()
	
public:
	UFUNCTION(BlueprintCallable, BlueprintInternalUseOnly)
	static void MakeDialogue(UPARAM(ref) UDialogue* &Dialogue, UDialogueEvent* StartingEvent);

	UFUNCTION(BlueprintCallable, BlueprintInternalUseOnly)
	static void LaunchDialogue(UDialogue* Dialogue, UObject* Object, FName LineEventName, FName EndEventName);

	UFUNCTION(BlueprintCallable, BlueprintInternalUseOnly)
	static void SelectOption(UDialogue* Dialogue, int32 OptionId);

	UFUNCTION(BlueprintCallable, BlueprintInternalUseOnly)
	static void StopDialogue(UDialogue* Dialogue);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static FLineStruct GetLineStruct(UDialogue* Dialogue);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static TArray<FOptionStruct> GetLineOptions(UDialogue* Dialogue);


	// Dialogue Events
	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static UDialogueEnd* MakeDialogueEnd(FName ReadEventName, UObject* Object, FName Condition);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static UDialogueGoto* MakeDialogueGoto(int32 Reference, bool bIsDestination);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static UDialogueOption* MakeDialogueOption(FName ReadEventName, UObject* Object, FName Condition, FName AvailabilityCondition, FText Text,
											TArray<UDialogueEvent*> Outcomes, TMap<FName, FName> TextParameters, TMap<FName, FString> MetadataParameters,
											USoundBase* Sound, UDialogueWave* DialogueWave);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static UDialogueTextEvent* MakeDialogueLine(FName ReadEventName, UObject* Object, FName Condition, FText Text,
											TArray<UDialogueEvent*> Outcomes, TMap<FName, FName> TextParameters, TMap<FName, FString> MetadataParameters,
											USoundBase* Sound, UDialogueWave* DialogueWave);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static UDialogueEvent* MakeDialogueDummy(TArray<UDialogueEvent*> Outcomes);

	UFUNCTION(BlueprintPure, BlueprintInternalUseOnly)
	static UDialogueBlueprintEvent* MakeDialogueBlueprintEvent(FName ReadEventName, UObject* Object, FName Condition, FName EventName);



	// Utils
	UFUNCTION(BlueprintCallable, BlueprintInternalUseOnly)
	static void SetTextVariableByName(UObject* Object, FName VarName, FText Value);

	UFUNCTION(BlueprintCallable, BlueprintInternalUseOnly)
	static void SetBoolVariableByName(UObject* Object, FName VarName, bool Value);

	UFUNCTION()
	static FString ProcessString(FString StringIn, TMap<FName, FString> Parameters);
};
